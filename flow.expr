{
    CONCAT: (x, y, ...other) => other.reduce((accum, curVal) => accum + curVal, x.toString() + y.toString()),
    CONTAINS_TEXT: (x, text) => (text.toString().indexOf(x.toString()) >= 0),
    UPPER: (x) => (x.toString().toUpperCase()),
	LOWER: (x) => (x.toString().toLowerCase()),
	IFNULL: (x, default) => x == null ? default : x,
	CONTAINS: (text, x) => text.contains(x),
	STARTSWITH: (text, x) => text.startsWith(x),
	ENDSWITH: (text, x) => text.endsWith(x),
	IF: (condition, value1, value2) => condition ? value1 : value2,
	LEN: (x) => x.length,
	REPLACE: (text, original, replacement) => text.toString().replace(original, replacement),
	TRIM: (x) => x.toString().trim(),
	AVG: (...params) => params.reduce((accum, curVal) => accum + curVal, 0) / params.length,
	EQ: (x, y) => x==y,
	NE: (x, y) => x!=y,
	GT: (x, y) => x>y,
	GTE: (x, y) => x>=y,
	LT: (x, y) => x<y,
	LTE: (x, y) => x<=y,
	SUM: (...params) => params.reduce((accum, curVal) => accum + curVal, 0),
	AND: (x, y, ...other) => other.reduce((accum, curVal) => accum && curVal, x && y),
	OR: (x, y, ...other) => other.reduce((accum, curVal) => accum || curVal, x || y),
	NOT: (x) => !x,
	EVAL: (x) => x,
	EVAL_ALIAS: (x) => x,
	COMPARE: (x, cmp, y) => (cmp == '>' ? (x > y) : (cmp == '<' ? (x < y) : (cmp == '=' ? (x == y) : (cmp == '>=' ? (x >= y) : (cmp == '<=' ? (x <= y): (cmp == '!=' ? (x != y) : undefined)))))),
	STRING: (x) => x != null ? x.toString() : x,
	INT: (x) => typeof x == 'string' ? parseInt(x) : (typeof x == 'number' ? Math.floor(x) : x),
	FLOAT: (x) => typeof x == 'string' ? parseFloat(x) : x,
	NOW: () => Date.now().toLocaleDateTimeString(),
	TODAY: () => Date.now().withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0).withMillisOfSecond(0).toLocaleDateTimeString(),
	FORMAT_DATE: (dt, format='yyyy-MM-dd HH:mm') => (typeof dt == 'string' ? Date.parse(dt) : dt).toLocaleDateTimeString({ format: format }),
	DATE: (year, month, date, hour = 0, minute = 0, second = 0) => Date.now().withYear(year).withMonthOfYear(month).withDayOfMonth(date).withHourOfDay(hour).withMinuteOfHour(minute).withSecondOfMinute(second).withMillisOfSecond(0).toLocaleDateTimeString(),
	PLUS_DATE: (dt, amount, unit) => (unit == 'year' ? Date.parse(dt).plusYears(amount) : (unit == 'month' ? Date.parse(dt).plusMonths(amount) : (unit == 'week' ? Date.parse(dt).plusWeeks(amount) : (unit == 'day' ? Date.parse(dt).plusDays(amount) : (unit == 'hour' ? Date.parse(dt).plusHours(amount) : (unit == 'minute' ? Date.parse(dt).plusMinutes(amount) : (unit == 'second' ? Date.parse(dt).plusSeconds(amount) : Date.parse(dt)))))))).toLocaleDateTimeString(),
	MINUS_DATE: (dt, amount, unit) => (unit == 'year' ? Date.parse(dt).minusYears(amount) : (unit == 'month' ? Date.parse(dt).minusMonths(amount) : (unit == 'week' ? Date.parse(dt).minusWeeks(amount) : (unit == 'day' ? Date.parse(dt).minusDays(amount) : (unit == 'hour' ? Date.parse(dt).minusHours(amount) : (unit == 'minute' ? Date.parse(dt).minusMinutes(amount) : (unit == 'second' ? Date.parse(dt).minusSeconds(amount) : Date.parse(dt)))))))).toLocaleDateTimeString(),
	DIFF_DATE: (dt1, dt2, unit) => Math.floor(Math.abs(Date.parse(dt1).getTime() - Date.parse(dt2).getTime()) / (unit == 'second' ? 1000 : (unit == 'minute' ? 60000 : (unit == 'hour' ? 3600000 : (unit == 'day' ? 86400000 : (unit == 'week' ? 604800000 : (unit == 'month' ? 2592000000 : (unit == 'year' ? 31536000000 : 1)))))))),
	DAY: (dt) => Date.parse(dt).getDate(),
	MONTH: (dt) => Date.parse(dt).getMonth(),
	YEAR: (dt) => Date.parse(dt).getFullYear(),
	HOUR: (dt) => Date.parse(dt).getHours(),
	MINUTE: (dt) => Date.parse(dt).getMinutes(),
	SECOND: (dt) => Date.parse(dt).getSeconds(),
	DAY_OF_WEEK: (dt) => (Date.parse(dt).getDay() + 1),
}
